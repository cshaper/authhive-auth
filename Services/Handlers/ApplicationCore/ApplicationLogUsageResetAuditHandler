// File: AuthHive.Auth/Services/Handlers/ApplicationCore/LogApplicationUsageResetAuditHandler.cs
using AuthHive.Core.Enums.Core;
using AuthHive.Core.Interfaces.Audit; // IAuditService
using AuthHive.Core.Interfaces.Base;
using AuthHive.Core.Models.PlatformApplication.Events; // UsageResetEvent

using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Text.Json; // ❗️ JSON 사용

namespace AuthHive.Auth.Handlers.ApplicationCore // ❗️ 네임스페이스 수정
{
    /// <summary>
    /// 애플리케이션 사용량(API, 스토리지 등) 초기화 시 감사 로그를 기록합니다.
    /// (이전 이름: LogUsageResetAuditHandler)
    /// </summary>
    public class LogApplicationUsageResetAuditHandler : // ❗️ 이름 수정
        IDomainEventHandler<UsageResetEvent>,
        IService
    {
        private readonly IAuditService _auditService;
        private readonly ILogger<LogApplicationUsageResetAuditHandler> _logger; // ❗️ 이름 수정

        public int Priority => 10;
        public bool IsEnabled => true;

        public LogApplicationUsageResetAuditHandler( // ❗️ 이름 수정
            IAuditService auditService,
            ILogger<LogApplicationUsageResetAuditHandler> logger) // ❗️ 이름 수정
        {
            _auditService = auditService;
            _logger = logger;
        }

        public async Task HandleAsync(UsageResetEvent @event, CancellationToken cancellationToken = default)
        {
            var applicationId = @event.AggregateId;
            var organizationId = @event.OrganizationId ?? Guid.Empty;
            var initiator = @event.TriggeredBy ?? Guid.Empty; // System

            try
            {
                _logger.LogInformation(
                    "Recording audit log for ApplicationUsageReset event. AppId: {AppId}, Type: {ResetType}, PreviousUsage: {PreviousUsage}",
                    applicationId, @event.ResetType, @event.PreviousUsage);

                var auditData = new Dictionary<string, object>
                {
                    ["application_id"] = applicationId,
                    ["organization_id"] = organizationId,
                    ["reset_type"] = @event.ResetType,
                    ["previous_usage"] = @event.PreviousUsage,
                    ["occurred_at"] = @event.OccurredAt,
                    ["severity"] = AuditEventSeverity.Info.ToString()
                };
                auditData.MergeMetadata(@event.Metadata, _logger);

                await _auditService.LogActionAsync(
                    actionType: AuditActionType.System, // 시스템 자동 작업
                    action: "APPLICATION_USAGE_RESET",
                    connectedId: initiator, // 시스템 (Empty Guid)
                    success: true,
                    resourceType: "ApplicationUsage",
                    resourceId: $"{applicationId}:{@event.ResetType}",
                    metadata: auditData,
                    cancellationToken: cancellationToken
                );
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to log audit for UsageResetEvent: {EventId}", @event.EventId);
            }
        }

        #region IService Implementation
        public Task InitializeAsync(CancellationToken cancellationToken = default) => Task.CompletedTask;
        public Task<bool> IsHealthyAsync(CancellationToken cancellationToken = default) => Task.FromResult(IsEnabled);
        #endregion
    }
}