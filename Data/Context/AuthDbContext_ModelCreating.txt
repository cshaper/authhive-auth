        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // ConnectedId 관계들
            modelBuilder.Entity<ConnectedId>()
                .HasOne(c => c.MemberProfile)
                .WithOne()
                .HasForeignKey<OrganizationMemberProfile>(p => p.ConnectedId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ConnectedId>()
                .HasOne(c => c.User)
                .WithMany()
                .HasForeignKey(c => c.UserId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ConnectedId>()
                .HasOne(c => c.Organization)
                .WithMany()
                .HasForeignKey(c => c.OrganizationId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ConnectedId>()
                .HasMany(c => c.RoleAssignments)
                .WithOne()
                .HasForeignKey(r => r.ConnectedId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ConnectedId>()
                .HasMany(c => c.Sessions)
                .WithOne()
                .HasForeignKey(s => s.ConnectedId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<ConnectedId>()
                .HasOne(c => c.InvitedBy)
                .WithMany(c => c.InvitedMembers)
                .HasForeignKey(c => c.InvitedByConnectedId)
                .OnDelete(DeleteBehavior.Restrict);

            // Role 관계들
            modelBuilder.Entity<Role>()
                .HasMany(r => r.RolePermissions)
                .WithOne(rp => rp.Role)
                .HasForeignKey(rp => rp.RoleId)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Role>()
                .HasOne(r => r.ParentRole)
                .WithMany(r => r.ChildRoles)
                .HasForeignKey(r => r.ParentRoleId)
                .OnDelete(DeleteBehavior.Restrict);

            // Permission 관계들
            modelBuilder.Entity<Permission>()
                .HasMany(p => p.RolePermissions)
                .WithOne(rp => rp.Permission)
                .HasForeignKey(rp => rp.PermissionId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Permission>()
                .HasOne(p => p.ParentPermission)
                .WithMany(p => p.ChildPermissions)
                .HasForeignKey(p => p.ParentPermissionId)
                .OnDelete(DeleteBehavior.Restrict);

            // 기본 인덱스
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();

            modelBuilder.Entity<ConnectedId>()
                .HasIndex(c => new { c.UserId, c.OrganizationId })
                .IsUnique();

            modelBuilder.Entity<Session>()
                .HasIndex(s => s.SessionToken)
                .IsUnique();

            base.OnModelCreating(modelBuilder);
        }
